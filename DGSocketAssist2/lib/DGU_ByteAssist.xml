<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DGU_ByteAssist</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:DGU.DGU_ByteAssist.ByteArray" -->
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Combine(System.Byte[],System.Byte[])">
            <summary>
            byteA와 byteB를 합친다.
            </summary>
            <param name="byteA"></param>
            <param name="byteB"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Copy_All(System.Byte[]@,System.Byte[])">
            <summary>
            byteB의 내용을 그대로 byteA로 복사한다.<br />
            입력값의 크기가 다른건 예외처리 하지 않음.
            </summary>
            <param name="byteA"></param>
            <param name="byteB"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Remove_Left(System.Byte[],System.Int32)">
            <summary>
            데이터의 앞을 지정한 크기 만큼 지운다.
            </summary>
            <param name="byteA"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Remove_Right(System.Byte[],System.Int32)">
            <summary>
            데이터의 뒤를 지정한 크기만큼 지운다.
            </summary>
            <param name="byteA"></param>
            <param name="nLength"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Remove_Right_Null(System.Byte[])">
            <summary>
            빈값이 찾고 찾은 자리에서 부터 오른쪽 내용을 지운다.
            </summary>
            <param name="byteA"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.ArrayCopyOffset(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            원본에서 저장할 대상에 크기만큼 복사한후 계산된 위치를 반환한다.
            </summary>
            <param name="byteOriginal">원본</param>
            <param name="byteStorage">저장할 대상</param>
            <param name="nOffsetStart">오프셋 시작</param>
            <returns>이동이 끝나 다시 계산된 오프셋시작 위치</returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Split(System.Byte[],System.Byte)">
            <summary>
            바이트 배열을 byteSplit잘라 리턴한다.
            <see href="https://www.codeproject.com/Answers/511256/Howplustoplussplitplusbyteplusarray#answer3">How to split byte array</see>
            </summary>
            <param name="byteOriginal"></param>
            <param name="byteSplit">자를 코드(1자리만 가능)</param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteArray.Packetize(System.Collections.Generic.IEnumerable{System.Byte},System.Byte)">
            <summary>
            byteSplit가 나타날때까지의 바이트를 리턴한다.
            <para>yield return에 의해 동작하므로 foreach를 써서 리턴받아야 한다.</para>
            </summary>
            <param name="stream"></param>
            <param name="byteSplit"></param>
            <returns></returns>
        </member>
        <member name="T:DGU.DGU_ByteAssist.ByteParse">
            <summary>
            문자열을 바이트로 변환하기위한 지원.
            <see href="https://github.com/dang-gun/DGUtility_DotNet/tree/main/DGU_ByteAssist">DGUtility_DotNet/DGU_ByteAssist/</see>/>
            </summary>
        </member>
        <member name="F:DGU.DGU_ByteAssist.ByteParse.ExceptionOn">
            <summary>
            예외 처리용에러를 내고 싶다면 이것을 true로 바꿔준다.
            </summary>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteArrayStringToByte(System.String,System.Byte[]@)">
            <summary>
            문자열인데 바이트 배열  정보인 경우(예> "00-01-06-33")
            '-'를 기준으로 자르고 'byteOut'의 크기에 맞게 변환한다.<br />
            '0x'로 시작하면 '0x'를 제거하고 핵사 데이터 처리를 한다.(2칸씩 자름)
            <para>들어있는 비트정보와 'byteOut'의 크기가 다르면 변환이 잘못되거나
            오류가 날수 있다.</para>
            </summary>
            <param name="sByteString">변환할 문자열</param>
            <param name="byteOut">출력에 사용할 바이트 배열</param>
            <returns>변환 성공 여부</returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteStringToByte(System.String,System.Byte@)">
            <summary>
            문자열인데 바이트 핵사(hex) 정보를(예> "06"=6, "AC"=172, "0x12") 
            바이트(한칸)로 변환한다.
            <para>들어있는 정보를 바이트 핵사 정보가 아니면 에러 난다.</para>
            <para>'0x00' 형태의 핵사 데이터는 '0x'를 제거하고 변환한다.</para>
            </summary>
            <param name="sByteString">변환할 문자열</param>
            <param name="byteOut">출력에 사용할 바이트 배열</param>
            <returns>변환 성공 여부</returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteToByteArray(System.Byte)">
            <summary>
            바이트를 1칸짜리 바이트 배열로 바꿔준다.
            </summary>
            <param name="byteData"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteTo2ByteArray(System.Byte[])">
            <summary>
            들어온 바이트 배열을 2바이트 배열로 바꾼다.
            <para>'byteData'의 크기가 2보다 크면 2칸 만큼의 데이터만 전달된다.</para>
            <para>지정한 크기보다 작은 바이트 배열이 넘어올때만 사용한다.</para>
            </summary>
            <param name="byteData"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteTo4ByteArray(System.Byte[])">
            <summary>
            들어온 바이트 배열을 4바이트 배열로 바꾼다.
            <para>'byteData'의 크기가 4보다 크면 4칸 만큼의 데이터만 전달된다.</para>
            <para>지정한 크기보다 작은 바이트 배열이 넘어올때만 사용한다.</para>
            </summary>
            <param name="byteData"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteTo8ByteArray(System.Byte[])">
            <summary>
            들어온 바이트 배열을 8바이트 배열로 바꾼다.
            <para>'byteData'의 크기가 8보다 크면 8칸 만큼의 데이터만 전달된다.</para>
            <para>지정한 크기보다 작은 바이트 배열이 넘어올때만 사용한다.</para>
            </summary>
            <param name="byteData"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteTo16ByteArray(System.Byte[])">
            <summary>
            들어온 바이트 배열을 16바이트 배열로 바꾼다.
            <para>'byteData'의 크기가 16보다 크면 16칸 만큼의 데이터만 전달된다.</para>
            <para>지정한 크기보다 작은 바이트 배열이 넘어올때만 사용한다.</para>
            </summary>
            <param name="byteData"></param>
            <returns></returns>
        </member>
        <member name="M:DGU.DGU_ByteAssist.ByteParse.ByteToNByteArray(System.Int32,System.Byte[])">
            <summary>
            들어온 바이트 배열을 N칸 바이트 배열로 바꾼다.
            <para>'byteData'의 크기가 N보다 크면 N칸 만큼의 데이터만 전달된다.</para>
            <para>지정한 크기보다 작은 바이트 배열이 넘어올때만 사용한다.</para>
            </summary>
            <param name="nLength">만들 바이트 길이 N</param>
            <param name="byteData"></param>
            <returns></returns>
        </member>
    </members>
</doc>
